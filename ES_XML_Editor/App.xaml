<Application x:Class="ES_XML_Editor.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ESXE="clr-namespace:ES_XML_Editor"
             StartupUri="EditorController.xaml" ShutdownMode="OnMainWindowClose">
    <Application.Resources>
        
    	<ResourceDictionary>
    		<ResourceDictionary.MergedDictionaries>
    			<ResourceDictionary Source="Simple Styles.xaml"/>
    		</ResourceDictionary.MergedDictionaries>
        
    		<DataTemplate DataType="WeaponModule">
    			<Expander Margin="0,10,0,0" IsExpanded="True">
    				<Expander.Header>
    					<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal">
    						<CheckBox Content="Name: " VerticalAlignment="Center"/>
    						<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Name].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top" TextInput="textChanged"/>
    					</StackPanel>
    				</Expander.Header>
    				<GroupBox Header="WeaponModule" VerticalAlignment="Top">
    					<WrapPanel Orientation="Horizontal">
    						<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Cost: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Cost].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Weight: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Weight].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Military Power: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[MilitaryPower].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    						</WrapPanel>
    						<GroupBox Header="Simulation" VerticalAlignment="Top" Height="140">
    							<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="DamageMin: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[DamageMin].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="DamageMax: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[DamageMax].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="CriticMultiplier: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[CriticMultiplier].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="CriticChance: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[CriticChance].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="InterceptionEvasion: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[InterceptionEvasion].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="NumberPerSalve: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[NumberPerSalve].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Accuracy: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[Accuracy].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="TurnBeforeReach: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[TurnBeforeReach].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="TurnToReload: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Attribute[TurnToReload].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="WeaponClass: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Simulation].Element[WeaponClass].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    							</WrapPanel>
    						</GroupBox>
    						<GroupBox Header="Reflection" VerticalAlignment="Top">
    							<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Speed: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Reflection].Attribute[Speed].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Priority: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Reflection].Attribute[Priority].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="BoardSideMaxDuration: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Reflection].Attribute[BoardSideMaxDuration].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="BoardSideFireDelay: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Reflection].Attribute[BoardSideFireDelay].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Projectiles-Prefabs: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Reflection].Element[Projectiles-Prefabs].Element[Prefab].Attribute[Path].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    							</WrapPanel>
    						</GroupBox>
    						<GroupBox Header="Gui" VerticalAlignment="Top">
    							<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Title: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Title].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Description: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Description].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Icon: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Icon].Attribute[Small].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Icon Large: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Icon].Attribute[Large].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>

    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="CharCode: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[CharCode].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    							</WrapPanel>
    						</GroupBox>
    					</WrapPanel>
    				</GroupBox>
    			</Expander>
    		</DataTemplate>
        
    		<DataTemplate DataType="Faction">
    			<Expander Margin="0,10,0,0" IsExpanded="True">
    				<Expander.Header>
    					<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal">
    						<CheckBox Content="Name: " VerticalAlignment="Center"/>
    						<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Name].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top" TextInput="textChanged"/>
    					</StackPanel>
    				</Expander.Header>
    				<GroupBox Header="Faction" VerticalAlignment="Top">
    					<WrapPanel>
    						<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Standard: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Standard].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Author: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Author].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Affinity: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Affinity].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="AffinityMapping: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[AffinityMapping].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Traits: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Traits].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    						</WrapPanel>
    						<GroupBox Header="Gui" VerticalAlignment="Top">
    							<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Title: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Title].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Description: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Description].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Icon Small: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Icon].Attribute[Small].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Icon Large: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Icon].Attribute[Large].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Icon Wide: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Icon].Attribute[Wide].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    							</WrapPanel>
    						</GroupBox>
    					</WrapPanel>
    				</GroupBox>
    			</Expander>
    		</DataTemplate>
        
    		<DataTemplate DataType="Technology">
    			<Expander Margin="0,10,0,0" IsExpanded="True">
    				<Expander.Resources>
    					<DataTemplate x:Key="unlockableDataTemplate" DataType="Unlockable">
    						<GroupBox Margin="0,10,0,0">
    							<GroupBox.Header>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal">
    									<CheckBox Content="Name: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Name].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top" TextInput="textChanged"/>
    								</StackPanel>
    							</GroupBox.Header>
    							<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Access: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Access].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    							</WrapPanel>
    						</GroupBox>
    					</DataTemplate>
    				</Expander.Resources>
    				<Expander.Header>
    					<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal">
    						<CheckBox Content="Name: " VerticalAlignment="Center"/>
    						<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Name].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top" TextInput="textChanged"/>
    					</StackPanel>
    				</Expander.Header>
    				<GroupBox Header="Technology" VerticalAlignment="Top">
    					<WrapPanel>
    						<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Cost: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Cost].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="IsUnique: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[IsUnique].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="X: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[X].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Y: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Y].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="Category: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Attribute[Category].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="PathsPrerequisites: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[PathsPrerequisites].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    							<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    								<CheckBox Content="TechnologiesDependencies: " VerticalAlignment="Center"/>
    								<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[TechnologiesDependencies].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    							</StackPanel>
    						</WrapPanel>
    						<GroupBox Header="Gui" VerticalAlignment="Top">
    							<WrapPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Vertical">
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Title: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Title].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Description: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Description].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    								<StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top" Orientation="Horizontal" Margin="5,0,0,0">
    									<CheckBox Content="Icon Small: " VerticalAlignment="Center"/>
    									<TextBox MinWidth="50" HorizontalAlignment="Left" Text="{Binding Element[Gui].Element[Icon].Attribute[Small].Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="23" TextWrapping="Wrap" VerticalAlignment="Top"/>
    								</StackPanel>
    							</WrapPanel>
    						</GroupBox>
    						<GroupBox Header="Unlockables" VerticalAlignment="Top">
    							<ListBox Background="#FFE6E6E6" ItemsSource="{Binding Elements[Unlockable]}" ItemTemplate="{StaticResource unlockableDataTemplate}" VerticalAlignment="Center" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled" BorderThickness="0">
    								<ListBox.ItemsPanel>
    									<ItemsPanelTemplate>
    										<WrapPanel IsItemsHost="True"/>
    									</ItemsPanelTemplate>
    								</ListBox.ItemsPanel>
    							</ListBox>
    						</GroupBox>
    					</WrapPanel>
    				</GroupBox>
    			</Expander>
    		</DataTemplate>

            <!-- Simple ListBox - This uses SimpleScrollViewer to allow items to be scrolled and SimpleListBoxItem to define the look of each item -->
            <Style x:Key="SimpleListBox" TargetType="{x:Type ListBox}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBox}">
                            <Grid>
                                <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                <ScrollViewer Margin="1" Style="{DynamicResource SimpleScrollViewer}" Focusable="false" Background="{TemplateBinding Background}">

                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be Trus -->
                                    <StackPanel Margin="2" IsItemsHost="true"/>

                                </ScrollViewer>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Simple ListBoxItem - This is used for each Item in a ListBox. The item's content is placed in the ContentPresenter -->

            <Style x:Key="SimpleListBoxItem" d:IsControlPart="True" TargetType="{x:Type ListBoxItem}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid SnapsToDevicePixels="true">
                                <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>

                                <!-- Change IsSelected SelectedBackgroundBrush to set the selection color for the items -->
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" TargetName="Border"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Simple Expander ToggleButton - This Button is used by the Expander control. When it is toggled it switches visibility on the Up_Arrow and Down_Arrow -->
            <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
                <Grid>
                    <Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{DynamicResource NormalBorderBrush}"/>
                    <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
                    <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Fill" Value="{DynamicResource MouseOverBrush}" TargetName="Rectangle"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Rectangle"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle"/>
                        <Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>
                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        <Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Up_Arrow"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Simple Expander 
	 This uses the Simpler ExpanderToggleButton. It sets Visibility on the ContentPresenter to expand
	 Limitations : The Simple Expander only expands down -->
            <Style x:Key="SimpleExpander" TargetType="{x:Type Expander}">
                <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*" x:Name="ContentRow"/>
                                </Grid.RowDefinitions>
                                <Border Grid.Row="0" x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2,2,0,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="20"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <ToggleButton Template="{DynamicResource ExpanderToggleButton}" Background="{DynamicResource NormalBrush}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True"/>
                                        <ContentPresenter Grid.Column="1" Margin="4" RecognizesAccessKey="True" ContentSource="Header"/>
                                    </Grid>
                                </Border>
                                <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,2,2">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                    <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>



    </Application.Resources>
</Application>
